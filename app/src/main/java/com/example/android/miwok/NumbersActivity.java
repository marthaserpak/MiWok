package com.example.android.miwok;import android.content.Context;import android.media.AudioManager;import android.media.MediaPlayer;import android.os.Bundle;import androidx.appcompat.app.AppCompatActivity;import android.view.View;import android.widget.AdapterView;import android.widget.ListView;import android.widget.Toast;import java.util.ArrayList;import static android.media.AudioManager.AUDIOFOCUS_LOSS_TRANSIENT;import static android.media.AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK;public class NumbersActivity extends AppCompatActivity {    private MediaPlayer mMediaPlayer;    private AudioManager mAudioManager;    AudioManager.OnAudioFocusChangeListener mOnAudioFocusChangeListener =            new AudioManager.OnAudioFocusChangeListener() {                @Override                public void onAudioFocusChange(int focusChange) {                    if (focusChange == AUDIOFOCUS_LOSS_TRANSIENT ||                            focusChange == AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {                        /* The AUDIOFOCUS_LOSS_TRANSIENT case means that we've lost audio focus                         * for a short amount of time. The AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK                         * case means that our app is allowed to continue playing but at                         * a lower volume. We'll treat both cases the same way because our app                         * is playing short sound files.                         *                         * Pause playback and reset the player to the start of the file.                         * The way, we can play the word from the beginning when we resume playback*/                        mMediaPlayer.pause();                        mMediaPlayer.seekTo(0);                    } else if (focusChange == AudioManager.AUDIOFOCUS_GAIN) {                        /* The AUDIOFOCUS_GAIN  case means we have regained focus and                         * can resume playback */                        mMediaPlayer.start();                    } else if (focusChange == AudioManager.AUDIOFOCUS_LOSS) {                        /* The AUDIOFOCUS_LOSS case means we've lost audio focus and                         * stop playback and clean up resources. */                        releaseMediaPlayer();                    }                }            };    /* This listener gets triggered when the mediaplayer    has completed playing the audio*/    private MediaPlayer.OnCompletionListener mOnCompletionListener =            new MediaPlayer.OnCompletionListener() {                @Override                public void onCompletion(MediaPlayer mp) {                    releaseMediaPlayer();                }            };    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.word_list);        /*Create and setup the audioManager to request audio focus */        mAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE);        final ArrayList<Word> words = new ArrayList<>();        words.add(new Word(R.drawable.number_one,                "one",                "lutti",                R.raw.number_one));        words.add(new Word(R.drawable.number_two,                "two",                "ottiko",                R.raw.number_two));        words.add(new Word(R.drawable.number_three,                "three",                "tolookosu",                R.raw.number_three));        words.add(new Word(R.drawable.number_four,                "four",                "oyyisa",                R.raw.number_four));        words.add(new Word(R.drawable.number_five,                "five",                "massokka",                R.raw.number_five));        words.add(new Word(R.drawable.number_six,                "six",                "temmoka",                R.raw.number_six));        words.add(new Word(R.drawable.number_seven,                "seven",                "kenekaku",                R.raw.number_seven));        words.add(new Word(R.drawable.number_eight,                "eight",                "kawinta",                R.raw.number_eight));        words.add(new Word(R.drawable.number_nine,                "nine",                "wo'e",                R.raw.number_nine));        words.add(new Word(R.drawable.number_ten,                "ten",                "na'aacha",                R.raw.number_ten));        WordAdapter adapter = new WordAdapter(this, words, R.color.numbers);        ListView listView = findViewById(R.id.list);        listView.setAdapter(adapter);        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                Word word = words.get(position);                releaseMediaPlayer();                int result = mAudioManager.requestAudioFocus(mOnAudioFocusChangeListener,                        AudioManager.STREAM_MUSIC,                        AudioManager.AUDIOFOCUS_GAIN_TRANSIENT);                if (result == AudioManager.AUDIOFOCUS_REQUEST_GRANTED) {                    mMediaPlayer = MediaPlayer.create(NumbersActivity.this,                            word.getAudioResourceId());                    mMediaPlayer.start();                    mMediaPlayer.setOnCompletionListener(mOnCompletionListener);                    Toast.makeText(NumbersActivity.this,                            "Play", Toast.LENGTH_SHORT).show();                }            }        });    }    @Override    protected void onStop() {        super.onStop();        /*  When the activity is stopped, release the media player resources         * because we won't be playing any more sounds*/        releaseMediaPlayer();    }    private void releaseMediaPlayer() {        if (mMediaPlayer != null) {            mMediaPlayer.release();            mMediaPlayer = null;            /* Regardless of whether or not we are granted audio focus,             * abandon(отказатся от) it. This also unregisters             * the AudioFocusChangeListener so we don't get anymore callbacks. */            mAudioManager.abandonAudioFocus(mOnAudioFocusChangeListener);        }    }}